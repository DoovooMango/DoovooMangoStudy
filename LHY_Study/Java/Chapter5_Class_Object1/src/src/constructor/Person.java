package src.constructor;

public class Person {

    // 인스턴스 변수(필드) — 각 객체마다 따로 가지고 있음
    String name;
    float height;
    float weight;

    /**
     * 생성자는 클래스를 생성할 때만 호출합니다.
     * 생성자 이름은 클래스 이름과 같고,
     * 생성자는 반환값이 없다.
     *
     * 디폴트 생성자 (기본 생성자)
     * 생성자가 없는 클래스는 클래스 파일을 컴파일 할 때 자바 컴파일러가 생성자를 자동으로 만들어준다.
     * 이렇게 만들어진 생성자를 디폴트 생성자(default constructor) 또는 기본 생성자
     * 이 생성자는 매개변수가 없고 구현 코드도 없다.
     * */

    // 기본(무매개변수) 생성자: 객체를 만들 때 기본값을 넣어줄 수 있음
    public Person() { /*
    * 비워두면 타입별 기본값(null/0/0.0F/false)
    * 아무 것도 하지 않음 name, height, weight 는 기본값(null) 유지
    */
    }

    /**
     * 생성자는 인스턴스 변수값을 매개변수로 받아서 인스턴스가 새로 생성될 때 인스턴스 변수값을 초기화하는 역할.
     * 인스턴스가 생성됨과 동시에 인스턴스 변수의 값을 지정하고 인스턴스를 초기화하기 위해 생성자를 직접 구현하여 사용.
     * */

    // 사람 이름을 매개변수로 받아서 Person 클래스를 생성하는 생성자 구현
    public Person(String pname) {
        name = pname;               // 전달받은 값으로 필드 초기화
    }

    /**
     * public Person() { } 와 public Person(String pname) {name = pname;} 의 차이
     * Person a = new Person();            // a.name == null
     * Person b = new Person("홍길동");     // b.name == "홍길동"
     * public Person() : 필드를 건드리지 않으므로 name은 기본값(null).
     * public Person(String pname) : 객체 생성과 동시에 name에 값을 채움.
     * */

    /**
     * 추가로 알아두면 좋아요
     * 1) 오버로딩 - 생성자 오버로딩(Constructor Overload):
     * 위처럼 두 생성자가 “같은 이름(Person) + 다른 매개변수”로 함께 존재할 수 있습니다.
     * 클래스에 생성자가 두 개 이상 제공되는 경우를 말한다.
     * 객체 지향 프로그램에서 메서드 이름이 같고 매개 변수만 다른 경우를 오버로드라고 한다.
     * 클래스에 생성자를 여러 개 제공하면 클래스를 사용하는 코드에서는 원하는 생성자를 선택해 사용할 수 있다.
     * 경우에 따라 클래스에서 일부러 디폴트 생성자를 제공하지 않기도 한다.
     *
     * 2) 기본 생성자 자동 제공 규칙:
     * 클래스에 아무 생성자도 안 쓰면 컴파일러가 public Person()을 자동으로 만들어 줍니다.
     * 하지만 한 개라도 생성자를 직접 쓰면 자동 기본 생성자는 만들어 주지 않습니다.
     * → 매개변수 생성자를 만든 뒤에도 new Person()을 허용하고 싶다면 직접 기본 생성자도 써야 합니다.
     *
     * 3) 중복 초기화 줄이기 (체이닝):
     * public Person() { this("Unknown"); }   // 기본 생성자가 다른 생성자를 호출
     *
     * 4) 언제 어떤 걸 쓰나?
     * 프레임워크(JPA 등) 때문에 “빈 생성자”가 필요한 경우가 많아 보통 기본 생성자를 둡니다(보통 public 또는 protected).
     * 어떤 값(예: name)을 반드시 받아야 한다면 기본 생성자를 없애거나(혹은 private) 매개변수 생성자만 제공하여 강제할 수 있습니다.
     *
     * 5) 요약:
     * 두 생성자 모두 객체는 만들지만,
     * 매개변수 생성자는 생성 시점에 name을 원하는 값으로 초기화한다는 점이 핵심 차이입니다.
     * */

    // 매개변수 있는 생성자: 처음 만들 때 원하는 값으로 초기화
    // 이름, 키, 몸무게를 매개변수로 입력받는 생성자
    public Person(String pname, float pheight, float pweight){
        name = pname;
        height = pheight;
        weight = pweight;
    }

    // 메서드(행동): 인스턴스 변수를 바꿀 수 있음
    void gainWeight(float kg) { this.weight += kg; }
    void grow(float cm)       { this.height += cm; }

    /***
     * 인스턴스 변수란?
     * 정의: 클래스 블록 안(class { … })에 메서드/생성자 바깥에서 선언되는 변수로, static이 없는 필드를 말해요.
     * 특징: 객체(인스턴스)마다 별도로 한 벌씩 존재합니다. 같은 클래스라도 객체가 다르면 값이 서로 독립적이에요.
     * 수명: 그 객체가 new로 만들어질 때 함께 생기고, 객체가 메모리에서 사라질 때 같이 없어집니다.
     * 접근 방법: 참조변수.필드명 (예: personKim.name)
     *
     * 반대로, static이 붙은 건 클래스 변수(모든 인스턴스가 공유),
     * 메서드 안에서 선언되는 건 지역 변수(메서드 실행 동안만 존재)입니다.
     *
     *
     * 생성자와 인스턴스 변수의 관계
     * 생성자는 “객체를 처음 만들 때” 인스턴스 변수를 초기화하는 특별한 메서드예요.
     * 위 예시의 Person(String, float, float)처럼요.
     * 물론 생성자 말고 메서드(예: gainWeight)로도 나중에 값 변경이 가능합니다.
     */

}
