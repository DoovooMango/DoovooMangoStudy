package src.singleton;

public class Company {

    /// [2] static 으로 클래스 내부에 유일한 인스턴스 생성하기
    private static Company instance = new Company();

    /**
     * 1단계에서 외부 인스턴스를 생성할 수 없도록 만들었고 우리가 프로그램에서 사용할 인스턴스 하나는 필요합니다.
     * 따라서 Company 클래스 내부에서 인스턴스를 생섭합니다. 이 인스턴스가 프로그램 전체에서 사용할 유일한 인스턴스입니다.
     * 또한 private 으로 선언하여 외부에 이 인스턴스에 접근하지 못하도록 제한해야 인스턴스 오류를 방지할 수 있다.
     * */

    /// [1] 생성자를 private 으로 만들기
    private Company(){}

    /**
     * 생성자가 하나도 없는 클래스는 컴파일러가 자동으로 디폴트 생성자 코드를 넣어 줍니다.
     * 그런데 컴파일러가 만들어 주는 디폴트 생성자는 항상 public 입니다.
     * 생성자가 public이면 외부 클래스에서 인스턴스를 여러 개 생성할 수 있습니다.
     * 따라서 싱글톤 패턴에서는 생성자를 반드시 따로 작성하고 그 접근 제어자를 private으로 지정해야 합니다.
     * 그러면 생성자가 있으므로 컴파일러가 디폴트 생성자를 만들지 않고, 접근 제어자가 private이므로 외부 클래스에서 마음대로 Company 인스턴스를 생성할 수 없게 됩니다.
     * 즉, Company 클래스 내부에서만 이 클래스의 생성을 제어할 수 있습니다.
     * */

    ///  [3] 외부에서 참조할 수 있는 public get() 메서드 만들기
    public static Company getInstance(){
        if(instance == null){
            instance = new Company();
        }
        return instance; // 유일하게 생성한 인스턴스 반환
    }

    /**
     * 이제 private으로 선언한 유일한 인스턴스를 외부에서도 사용할 수 있도록 설정해야 합니다.
     * 이를 위해 public 메서드를 생성합니다. 그리고 유일하게 생성한 인스턴스를 반환해 줍니다.
     * 이때 인스턴스를 반환하는 메서드는 getInstance() 으로 정하고,
     * 반드시 static 으로 선언해야 합니다.
     * 왜냐하면 인스턴스 생성과 상관없이 호출할 수 있어야 하기 때문이다.
     * */

}
